{"version":3,"file":"main.js","mappings":"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","sources":["webpack://ad-survey/./assets/scripts/inc/utility.js","webpack://ad-survey/./assets/scripts/inc/survey.js","webpack://ad-survey/./assets/scripts/main.js"],"sourcesContent":["/*\r\n    Description: ultility class\r\n    Author URI: adillice.com\r\n    Author: adillice\r\n    Version: 1.0.0\r\n*/\r\n\r\n// utility helper\r\nclass Utility{\r\n\r\n    // constructor\r\n    constructor(){\r\n        // nothing to do yet...\r\n    }\r\n\r\n    // turn form data to query string\r\n    queryStringData(formObj){\r\n\r\n        // copy to array\r\n        const data = [...formObj.entries()];\r\n\r\n        // return mapped query string\r\n        return data.map(value => `${encodeURIComponent(value[0])}=${encodeURIComponent(value[1])}`).join(\"&\");\r\n        \r\n    }\r\n\r\n    // do a post call\r\n    async post(obj = null){\r\n        \r\n        // make sure we have url and data\r\n        if(!obj || obj == null) return;\r\n\r\n        // get action\r\n        const action = obj.action,\r\n        \r\n        // get url\r\n        url = obj.url,\r\n        \r\n        // get data\r\n        data = obj.data,\r\n\r\n        // convert values to query string\r\n        query = (data) ? this.queryStringData(data) : null;\r\n\r\n        // make sure we have data\r\n        if(query == null) return;\r\n\r\n        //init XML request\r\n        const xhr = new XMLHttpRequest();\r\n\r\n        // make a promise - resolve:error\r\n        let promise = new Promise((res, err) =>{\r\n            \r\n            // init xhr\r\n            xhr.open(\"POST\", `${url}?action=${action}`, true);\r\n\r\n            // set header\r\n            xhr.setRequestHeader(\"Access-Control-Allow-Headers\", \"*\");\r\n            xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\r\n\r\n            // check on state change\r\n            xhr.addEventListener(\"readystatechange\", function(){\r\n                \r\n                // request complete\r\n                if(this.readyState === XMLHttpRequest.DONE){\r\n\r\n                    // status 0-299 should be ok\r\n                    if(this.status < 300){\r\n                        \r\n                        //set response\r\n                        res(this.responseText);\r\n\r\n                    // somethings not right\r\n                    }else{\r\n\r\n                        // set error\r\n                        err(this.statusText)\r\n                    \r\n                    }\r\n\r\n                }\r\n\r\n            });\r\n\r\n            //send data\r\n            xhr.send(query);\r\n\r\n        });\r\n\r\n        //return promise\r\n        return promise;\r\n\r\n    }\r\n\r\n}\r\n\r\n// export\r\nexport default Utility;","/*\r\n    Description: AD survey user (frontend) scripts\r\n    Author URI: adillice.com\r\n    Author: adillice\r\n    Version: 1.0.0\r\n*/\r\n\r\n// import utility\r\nimport Utility from \"./utility\";\r\n\r\n// manage class\r\nclass Survey extends Utility{\r\n\r\n    // constructor\r\n    constructor({\r\n\r\n        // questions class\r\n        questionsClass = \"ads__questions__form__ul__li\",\r\n\r\n        // gui class\r\n        guiClass = \"ads__questions__form__ui\",\r\n\r\n        // msg area class\r\n        msgClass = \"ads__questions__form__ui__msg\",\r\n\r\n        // close class\r\n        closeClass = \"ads__questions__close\",\r\n\r\n        // prev class\r\n        prevClass = \"ads__questions__form__ui__wrapper__prev\",\r\n\r\n        // next class\r\n        nextClass = \"ads__questions__form__ui__wrapper__next\",\r\n\r\n        // submit class\r\n        submitClass = \"ads__questions__form__ui__submit\",\r\n\r\n        // count text class\r\n        countClass = \"ads__questions__form__ui__wrapper__copy > span\",\r\n\r\n        // question hide class\r\n        questionHideClass = \"--ad-survey-hide\",\r\n\r\n        // semi transparent class\r\n        semiTransparentClass = \"--ad-survey-semi\",\r\n\r\n        // loading icon class\r\n        loadingClass = \"--ad-survey-load\",\r\n\r\n        // msg success class\r\n        successClass = \"--ad-survey-msg-success\",\r\n\r\n        // msg error class\r\n        errorClass = \"--ad-survey-msg-error\",\r\n\r\n        // allowed survey user input types\r\n        allowedInputs = \"input[type='text'], input[type='checkbox'], input[type='radio']\",\r\n\r\n        // survey save action\r\n        saveAction = \"ad_survey_data\",\r\n\r\n    } = {}){\r\n\r\n        // super\r\n        super();\r\n\r\n        // get all questions\r\n        this.questions = document.querySelectorAll(`.${questionsClass}`);\r\n\r\n        // get msg area\r\n        this.msg = document.querySelector(`.${msgClass}`);\r\n\r\n        // get gui\r\n        this.gui = document.querySelector(`.${guiClass}`);\r\n\r\n        // close button\r\n        this.close = document.querySelector(`.${closeClass}`);\r\n\r\n        // get questions parent element (list)\r\n        this.parent = (this.questions[0] && this.questions[0].parentNode) ? this.questions[0].parentNode : null;\r\n\r\n        // get total question count\r\n        this.total = (this.questions) ? this.questions.length : 0;\r\n        \r\n        // count copy\r\n        this.count = (this.gui) ? this.gui.querySelector(`.${countClass}`) : null; \r\n\r\n        // prev bttn\r\n        this.prev = (this.gui) ? this.gui.querySelector(`.${prevClass}`) : null;\r\n        \r\n        // next bttn\r\n        this.next = (this.gui) ? this.gui.querySelector(`.${nextClass}`) : null;\r\n\r\n        // submit bttn\r\n        this.submit = (this.gui) ? this.gui.querySelector(`.${submitClass}`) : null;\r\n\r\n        // get current question\r\n        this.current = (this.total > 0) ? 1 : 0;\r\n\r\n        // semi transparent\r\n        this.semi = semiTransparentClass;\r\n\r\n        // question hide\r\n        this.hide = questionHideClass;\r\n\r\n        // success msg\r\n        this.success = successClass; \r\n\r\n        // error msg\r\n        this.error = errorClass; \r\n\r\n        // load icon\r\n        this.load = loadingClass;\r\n\r\n        // allowed user inputs\r\n        this.allowed = allowedInputs;\r\n\r\n        // survey save action\r\n        this.action = saveAction;\r\n\r\n        // run events\r\n        this.events();\r\n\r\n    }\r\n\r\n    // fire events\r\n    events(){\r\n\r\n        // click events\r\n        if(this.close) this.close.addEventListener(\"touchstart\", this.closeSurvey.bind(this));\r\n        if(this.close) this.close.addEventListener(\"click\", this.closeSurvey.bind(this));\r\n        if(this.prev) this.prev.addEventListener(\"touchstart\", this.prevQuestion.bind(this));\r\n        if(this.prev) this.prev.addEventListener(\"click\", this.prevQuestion.bind(this));\r\n        if(this.next) this.next.addEventListener(\"touchstart\", this.nextQuestion.bind(this));\r\n        if(this.next) this.next.addEventListener(\"click\", this.nextQuestion.bind(this));\r\n        if(this.parent) this.parent.addEventListener(\"touchstart\", this.userAnsweredCheck.bind(this));\r\n        if(this.parent) this.parent.addEventListener(\"click\", this.userAnsweredCheck.bind(this));\r\n        if(this.parent) this.parent.addEventListener(\"keyup\", this.userAnsweredCheck.bind(this));\r\n        if(this.gui && this.gui.parentNode) this.gui.parentNode.addEventListener(\"submit\", this.process.bind(this));\r\n\r\n    }\r\n\r\n    // close overlay\r\n    closeSurvey(e){\r\n\r\n        // prevent default\r\n        e.preventDefault();\r\n\r\n        // close bttn\r\n        const bttn = this.close,\r\n\r\n        // survey wrapper\r\n        wrapper = bttn.parentNode;\r\n\r\n        // remove wrapper\r\n        if(wrapper) wrapper.remove();\r\n\r\n    }\r\n\r\n    // prev question\r\n    prevQuestion(e){\r\n\r\n        // end case\r\n        if(!this.prev || (this.current <= 1) || (this.questions[this.current - 1].dataset.num === \"0\")) return;\r\n\r\n        // go to next question\r\n        this.moveQuestions(e, -1);\r\n        \r\n        // show/hide buttons\r\n        this.displayButtons();\r\n\r\n    }\r\n\r\n    // next question\r\n    nextQuestion(e){\r\n\r\n        // end case\r\n        if(!this.next || (this.current >= this.total) || (this.questions[this.current - 1].dataset.num === \"0\")) return;\r\n\r\n        // go to next question\r\n        this.moveQuestions(e);\r\n\r\n        // show/hide buttons\r\n        this.displayButtons();\r\n\r\n    }\r\n\r\n    // move forward or back\r\n    moveQuestions(e, dir = 1){\r\n\r\n        // prevent default\r\n        e.preventDefault();\r\n\r\n        // hide current question\r\n        this.questions[this.current - 1].classList.add(this.hide);\r\n\r\n        // increment next question\r\n        this.current = (this.current && (this.current <= this.total)) ? (this.current + (dir * 1)) : this.total;\r\n\r\n        // show next question\r\n        this.questions[this.current - 1].classList.remove(this.hide);\r\n\r\n        // update count\r\n        this.count.textContent = this.current;\r\n\r\n    }\r\n\r\n    // check if user answered current question\r\n    userAnsweredCheck(e){\r\n\r\n        // get current target\r\n        const target = e.target;\r\n        \r\n        // do nothing if not an input\r\n        if(!target.matches(this.allowed)) return;\r\n\r\n        // allowed input types\r\n        const allowed = this.questions[this.current - 1].querySelectorAll(this.allowed);\r\n        \r\n        // LOOP: thru item\r\n        for(const item of allowed){\r\n\r\n            // type\r\n            let type = item.type.toLowerCase();\r\n\r\n            // reset DOM proceed value\r\n            this.questions[this.current - 1].dataset.num = 0;\r\n\r\n            // reset bttn(s)\r\n            this.displayButtons(true);\r\n\r\n            // check for radio and checkboxes\r\n            if((type === \"radio\" || type === \"checkbox\")){\r\n\r\n                // checked if user picked something\r\n                if(item.checked){\r\n\r\n                    // enable proceed\r\n                    this.questions[this.current - 1].dataset.num = 1;\r\n\r\n                    // show bttn(s)\r\n                    this.displayButtons();\r\n                    \r\n                    // exit loop\r\n                    break;\r\n                \r\n                } \r\n\r\n            // all other input fields \r\n            }else{\r\n\r\n                // checked if user wrote something\r\n                if(item.value && item.value.length > 3){\r\n\r\n                    // enable proceed\r\n                    this.questions[this.current - 1].dataset.num = 1;\r\n\r\n                    // show bttn(s)\r\n                    this.displayButtons();\r\n                    \r\n                    // exit loop\r\n                    break;\r\n                \r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        \r\n        // tally total answer\r\n        this.checkAllAnswers();\r\n\r\n    }\r\n\r\n    // check total answer\r\n    checkAllAnswers(){\r\n\r\n        // init total answer \r\n        let answered = 0;\r\n\r\n        // LOOP: thru questions\r\n        for(const data of this.questions){\r\n\r\n            // data is 1\r\n            if(data.dataset && (data.dataset.num > 0)) answered++;\r\n\r\n        }\r\n\r\n        // display submit bttn\r\n        this.displaySubmit((answered >= this.total));\r\n\r\n    }\r\n\r\n    // button display status\r\n    displayButtons(hide = false){\r\n\r\n        // end case \r\n        if(this.questions[this.current - 1].dataset.num == 0){\r\n\r\n            // hide classes\r\n            this.prev.classList.add(this.semi);\r\n            this.next.classList.add(this.semi);\r\n            \r\n            // return\r\n            return;\r\n            \r\n        }\r\n\r\n        // update bttns\r\n        if(!hide){\r\n\r\n            // show classes\r\n            this.prev.classList.remove(this.semi);\r\n            this.next.classList.remove(this.semi);\r\n        \r\n        }else{\r\n\r\n            // hide classes\r\n            this.prev.classList.add(this.semi);\r\n            this.next.classList.add(this.semi);\r\n        \r\n        }\r\n\r\n        // if we are on first question keep hidden\r\n        if(this.current === 1) this.prev.classList.add(this.semi);\r\n        \r\n        // if we are on last question keep hidden\r\n        if(this.current === this.total) this.next.classList.add(this.semi);\r\n\r\n    }\r\n\r\n    // display submit\r\n    displaySubmit(show = false){\r\n\r\n        // HIDE\r\n        if(!show){\r\n\r\n            // hide bttn\r\n            this.submit.classList.add(this.hide);\r\n            \r\n        // SHOW\r\n        }else{\r\n            \r\n            // show bttn \r\n            this.submit.classList.remove(this.hide);\r\n\r\n        }\r\n\r\n        // return\r\n        return;\r\n\r\n    }\r\n\r\n    // process form\r\n    process(e){\r\n\r\n        // prevent default\r\n        e.preventDefault();\r\n\r\n        // get form\r\n        const form = e.target,\r\n        \r\n        // get form data\r\n        data = new FormData(form),\r\n\r\n        // msg area\r\n        msg = this.msg,\r\n\r\n        // submit bttn\r\n        bttn = this.submit, \r\n\r\n        // init output\r\n        output = [];\r\n        \r\n        // add loading icon\r\n        bttn.classList.add(this.load);\r\n        \r\n        // get admin ajax url\r\n        output.url = (form && form.action) ? form.action : null;\r\n\r\n        // set ajax action\r\n        output.action = this.action;\r\n\r\n        // add form data to output\r\n        output.data = data;\r\n\r\n        // make ajax call\r\n        this.post(output).then((response) => {\r\n\r\n            // set results to response\r\n            const results = JSON.parse(response);\r\n\r\n            // update class\r\n            bttn.classList.remove(this.load);\r\n\r\n            // SUCCESS\r\n            if(results.success){\r\n\r\n                // ul list\r\n                const ulWrapper = (this.questions[0]) ? this.questions[0].parentNode : null,\r\n\r\n                // gui wrapper\r\n                guiWrapper = (this.prev) ? this.prev.parentNode : null;\r\n\r\n                // build success msg\r\n                return this.buildSuccessMsg(ulWrapper, guiWrapper, bttn, msg, results.success, true);\r\n\r\n            }\r\n\r\n            // ERROR(S)\r\n            if(results.error){\r\n\r\n                // build success msg\r\n                return this.buildSuccessMsg(null, null, null, msg, results.error);\r\n\r\n            }\r\n\r\n        // error\r\n        },(error) => {\r\n            \r\n            // update class\r\n            bttn.classList.remove(this.load);\r\n\r\n            // build success msg\r\n            return this.buildSuccessMsg(null, null, null, msg, error);            \r\n\r\n        });\r\n\r\n    }\r\n\r\n    // success message\r\n    buildSuccessMsg(ul = null, gui = null, bttn = null, msg = null, copy = null, success = false){\r\n\r\n        // end case\r\n        if((msg == null) || (copy == null)) return;\r\n\r\n        // remove questions\r\n        if(ul != null) ul.remove();\r\n\r\n        // remove gui\r\n        if(gui != null) gui.remove();\r\n\r\n        // remove bttn\r\n        if(bttn != null) bttn.remove();\r\n\r\n        // create p tag\r\n        const p = document.createElement(\"p\");\r\n        \r\n        // add class\r\n        (success) ? p.classList.add(this.success) : p.classList.add(this.error)\r\n\r\n        // reset msg\r\n        msg.innerHTML = '';\r\n\r\n        // add copy to p\r\n        p.textContent = copy;\r\n\r\n        // add p to msg\r\n        msg.appendChild(p);\r\n\r\n        // show msg area\r\n        msg.classList.remove(this.hide);\r\n\r\n    }\r\n\r\n}\r\n\r\n// export\r\nexport default Survey;","/*\r\n    Description: js entry point\r\n    Author URI: adillice.com\r\n    Author: adillice\r\n    Version: 1.0.0\r\n*/\r\n\r\n// use strict\r\n'use strict';\r\n\r\n// import files\r\nimport \"../css/main.scss\";\r\nimport Survey from \"./inc/survey\";\r\n\r\n// on ready\r\nconst onReady = (callback) =>{\r\n    \r\n    // check readystate\r\n    if(document.readyState != 'loading'){\r\n\r\n        // run callback\r\n        callback();\r\n\r\n    // else\r\n    }else if(document.addEventListener){\r\n\r\n        // add event listener\r\n        document.addEventListener('DOMContentLoaded', callback);\r\n\r\n    // final\r\n    }else{\r\n\r\n        // attach event \r\n        document.attachEvent('onreadystatechange', function(){\r\n\r\n            // check ready state\r\n            if(document.readyState == 'complete') callback();\r\n\r\n        });\r\n\r\n    }\r\n    \r\n};\r\n\r\n// wait for page to load...\r\nonReady(() => {\r\n\r\n    // frontend scripts \r\n    const survey = new Survey();\r\n\r\n});"],"names":["constructor","queryStringData","formObj","entries","map","value","encodeURIComponent","join","post","obj","action","url","data","query","this","xhr","XMLHttpRequest","Promise","res","err","open","setRequestHeader","addEventListener","readyState","DONE","status","responseText","statusText","send","Utility","questionsClass","guiClass","msgClass","closeClass","prevClass","nextClass","submitClass","countClass","questionHideClass","semiTransparentClass","loadingClass","successClass","errorClass","allowedInputs","saveAction","super","questions","document","querySelectorAll","msg","querySelector","gui","close","parent","parentNode","total","length","count","prev","next","submit","current","semi","hide","success","error","load","allowed","events","closeSurvey","bind","prevQuestion","nextQuestion","userAnsweredCheck","process","e","preventDefault","wrapper","remove","dataset","num","moveQuestions","displayButtons","dir","classList","add","textContent","target","matches","item","type","toLowerCase","checked","checkAllAnswers","answered","displaySubmit","show","form","FormData","bttn","output","then","response","results","JSON","parse","ulWrapper","guiWrapper","buildSuccessMsg","ul","copy","p","createElement","innerHTML","appendChild","callback","Survey","attachEvent"],"sourceRoot":""}